name: seminario-rust
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
# # concurrency: 
#   group: ci-${{ gitgub.ref }}  
#   cancel-in-progress: true  

env:
  CARGO_TERM_COLOR: always
  PGUSER: admin
  PGPASSWORD: admin123
  PGDATABASE: campus_virtual
  PGHOST: localhost
  PGPORT: 5432
jobs:
  test:
    name: Rust proyecto
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.PGUSER }}
          POSTGRES_PASSWORD: ${{ env.PGPASSWORD }}
          POSTGRES_DB: ${{ env.PGDATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true
    - name: Optimize runner for performance
      run: |
        echo "Maximizing available resources"
        sudo swapoff -a
        free -h
        # Configurar compilación para usar el máximo de recursos disponibles
        echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV
        echo "RUST_TEST_THREADS=$(nproc)" >> $GITHUB_ENV
    - name: Run cargo fmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check
    - name: Run cargo clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: -- -D warnings
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
      env:
        DATABASE_URL: postgres://${{ env.PGUSER }}:${{ env.PGPASSWORD }}@localhost:5432/${{ env.PGDATABASE }}
        
  # Ejecutar pruebas en paralelo para maximizar el uso de recursos
  parallel-stress-tests:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        chunk: [1, 2, 3, 4] # Dividir las pruebas en chunks para paralelizar
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Optimize runner for stress test
      run: |
        echo "Maximizing available resources"
        sudo swapoff -a
        free -h
        echo "CARGO_BUILD_JOBS=$(nproc)" >> $GITHUB_ENV
        echo "RUST_TEST_THREADS=$(nproc)" >> $GITHUB_ENV
    - name: Run stress test chunk ${{ matrix.chunk }}
      run: |
        # Ejecutar una porción de las pruebas de estrés
        # Asegúrate de adaptar esto a tu estructura de pruebas
        TEST_FILES=$(find tests -name "stress.rs" | sort | awk "NR % 4 == ${{ matrix.chunk - 1 }}")
        for file in $TEST_FILES; do
          RUST_MIN_STACK=8388608 cargo test --release --test $(basename $file .rs)
        done

  build-and-push:
    needs: parallel-stress-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/seminario-backend-rust:latest
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITAL_OCEAN_ACCESS_TOKEN }}
    - name: Deploy to DigitalOcean
      run: |
        doctl apps create --spec ./.do/app.yaml
